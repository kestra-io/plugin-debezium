services:
  mysql:
    image: mysql:8.0
    command: --local-infile
    environment:
      MYSQL_ROOT_PASSWORD: mysql_passwd
      MYSQL_DATABASE: kestra
    ports:
      - "63306:3306"
    volumes:
      - ${PWD}/docker/mysql/:/etc/mysql/conf.d
      - ${PWD}/data:/tmp/docker

  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pg_passwd
      POSTGRES_DB: postgres
    ports:
      - "65432:5432"
    volumes:
      - ${PWD}/data:/tmp/docker
      - ./src/test/resources/postgres.sql:/docker-entrypoint-initdb.d/postgres.sql:ro
    command: >
      postgres -c wal_level=logical
               -c max_wal_senders=10
               -c max_replication_slots=10

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    ports:
      - "61433:1433"
    environment:
      ACCEPT_EULA: Y
      SA_PASSWORD: Sqls3rv3r_Pa55word!

  mongodb:
    build:
      context: ./docker/mongo/
      dockerfile: Dockerfile
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo_user
      MONGO_INITDB_ROOT_PASSWORD: mongo_passwd
      MONGO_INITDB_DATABASE: kestra
    ports:
      - "27017:27017"
    healthcheck:
      test: |
        test $$(mongosh --quiet -u mongo_user -p mongo_passwd --eval "try { rs.initiate({ _id: 'rs0', members: [{ _id: 0, host: 'localhost:27017' }] }).ok } catch (_) { rs.status().ok }") -eq 1
      interval: 10s
      start_period: 30s

#  db2:
#    build:
#      context: ./docker/db2/
#      dockerfile: Dockerfile
#    ports:
#      - "5023:50000"
#    privileged: true
#    env_file:
#      - environment_db2
#    healthcheck:
#      test: ["CMD-SHELL", "su - db2inst1",  "db2 connect to sample"]
#      interval: 15s
#      retries: 7
#      timeout: 240s
#      start_period: 240s

  oracle:
    image: gvenzl/oracle-xe:21-full
    ports:
      - "1521:1521"
    environment:
      APP_USER: dbzuser
      APP_USER_PASSWORD: dbz
      ORACLE_PASSWORD: passwd
    volumes:
      - ./docker/oracle:/container-entrypoint-initdb.d
    healthcheck:
      test: healthcheck.sh
      interval: 10s
      timeout: 5s
      retries: 10

