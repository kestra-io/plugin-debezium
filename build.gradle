plugins {
    id 'java-library'
    id "idea"
    id 'jacoco-report-aggregation'
    id "com.adarshr.test-logger" version "4.0.0" apply(false)
    id "com.github.johnrengelman.shadow" version "8.1.1" apply(false)
    id 'signing'
    id "com.github.ben-manes.versions" version "0.52.0"
    id 'net.researchgate.release' version '3.1.0'
    id "com.vanniktech.maven.publish" version "0.33.0"
}

def isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.add("-parameters")
}

group "io.kestra.plugin"

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        if (isBuildSnapshot) {
            maven { url "https://central.sonatype.com/repository/maven-snapshots/" }
        }
    }
}
subprojects {
    group "io.kestra.plugin"
    sourceCompatibility = 21
    targetCompatibility = 21

    apply plugin: "java-library"
    apply plugin: "idea"

    configurations.all {
        resolutionStrategy {
            // Debezium is still using Kafka 3.9.x
            force  group: 'org.apache.kafka', name: 'kafka-clients', version: "3.9.1"
        }
    }

    dependencies {
        // Platform
        annotationProcessor enforcedPlatform("io.kestra:platform:$kestraVersion")
        implementation enforcedPlatform("io.kestra:platform:$kestraVersion")
        api enforcedPlatform("io.kestra:platform:$kestraVersion")

        // Lombok
        annotationProcessor "org.projectlombok:lombok"
        compileOnly "org.projectlombok:lombok"

        // Micronaut
        compileOnly "io.micronaut:micronaut-context"
        compileOnly "io.micronaut.reactor:micronaut-reactor"

        // Kestra
        annotationProcessor group: "io.kestra", name: "processor", version: kestraVersion
        compileOnly group: "io.kestra", name: "core", version: kestraVersion

        // Logs
        constraints {
            // Forced dependencies
            api("org.slf4j:slf4j-api:2.0.16")
        }
        compileOnly 'ch.qos.logback:logback-classic'
    }
}

/**********************************************************************************************************************\
 * Test
 **********************************************************************************************************************/
subprojects {
    apply plugin: "com.adarshr.test-logger"

    test {
        useJUnitPlatform()
    }

    testlogger {
        theme "mocha-parallel"
        showExceptions true
        showFullStackTraces true
        showStandardStreams true
        showPassedStandardStreams false
        showSkippedStandardStreams true
    }

    dependencies {
        // Platform
        testAnnotationProcessor enforcedPlatform("io.kestra:platform:$kestraVersion")
        testImplementation enforcedPlatform("io.kestra:platform:$kestraVersion")

        // lombok
        testAnnotationProcessor "org.projectlombok:lombok"
        testCompileOnly 'org.projectlombok:lombok'

        // micronaut
        testAnnotationProcessor "io.micronaut:micronaut-inject-java"
        testAnnotationProcessor "io.micronaut.validation:micronaut-validation-processor"
        testImplementation "io.micronaut.test:micronaut-test-junit5"
        testImplementation "io.micronaut.reactor:micronaut-reactor"

        // test deps needed only for to have a runner
        testAnnotationProcessor group: "io.kestra", name: "processor", version: kestraVersion
        testImplementation group: "io.kestra", name: "core", version: kestraVersion
        testImplementation group: "io.kestra", name: "tests", version: kestraVersion
        testImplementation group: "io.kestra", name: "repository-memory", version: kestraVersion
        testImplementation group: "io.kestra", name: "runner-memory", version: kestraVersion
        testImplementation group: "io.kestra", name: "storage-local", version: kestraVersion

        // test
        testImplementation "org.junit.jupiter:junit-jupiter-engine"
        testImplementation "org.junit.jupiter:junit-jupiter-params"
        testImplementation "org.hamcrest:hamcrest"
        testImplementation "org.hamcrest:hamcrest-library"

        testImplementation group: 'com.h2database', name: 'h2', version: '2.3.232'
    }
}

/**********************************************************************************************************************\
 * Allure Reports
 **********************************************************************************************************************/
subprojects {
    dependencies {
        testImplementation enforcedPlatform("io.kestra:platform:$kestraVersion")
        testImplementation "io.qameta.allure:allure-junit5"
    }

    configurations {
        agent {
            canBeResolved = true
            canBeConsumed = true
        }
    }

    dependencies {
        agent "org.aspectj:aspectjweaver:1.9.24"
    }

    test {
        jvmArgs = [ "-javaagent:${configurations.agent.singleFile}" ]
    }
}

/**********************************************************************************************************************\
 * Jacoco
 **********************************************************************************************************************/
subprojects {
    apply plugin: 'jacoco'

    test {
        finalizedBy jacocoTestReport
    }
}

dependencies {
    jacocoAggregation subprojects
}

tasks.named('testCodeCoverageReport') {
    dependsOn = subprojects.test
}

tasks.named('check') {
    dependsOn tasks.named('testCodeCoverageReport', JacocoReport)
}

/**********************************************************************************************************************\
 * Publish
 **********************************************************************************************************************/
subprojects { Project subproject ->
    apply plugin: "com.adarshr.test-logger"
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: "signing"
    apply plugin: "com.vanniktech.maven.publish"

    if (subproject != rootProject) {
        return
    }

    if (subproject.path != ":plugin-debezium") {
        shadowJar {
            dependsOn(":plugin-debezium:shadowJar")
        }
    }

    mavenPublishing {
        publishToMavenCentral(true)
        signAllPublications()
        coordinates("${project.group}", "${project.name}", "${project.version}")

        pom {
            name        = project.name
            description = "${project.group}:${project.name}:${rootProject.version}"
            url         = "https://github.com/kestra-io/${rootProject.name}"

            licenses {
                license {
                    name = "The Apache License, Version 2.0"
                    url  = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                }
            }
            developers {
                developer {
                    id    = "tchiotludo"
                    name  = "Ludovic Dehon"
                    email = "ldehon@kestra.io"
                }
            }
            scm {
                connection = 'scm:git:'
                url = "https://github.com/kestra-io/${rootProject.name}"
            }
        }
    }

    shadowJar {
        archiveClassifier.set(null)
        mergeServiceFiles()
        if (subproject.name != "plugin-debezium") {
            dependsOn(project(":plugin-debezium").tasks.named("shadowJar"))
        }
    }

    tasks.withType(GenerateModuleMetadata).configureEach {
        // Suppression this validation error as we want to enforce the Kestra platform
        suppressedValidationErrors.add('enforced-platform')
    }
}

/**********************************************************************************************************************\
 * Version
 **********************************************************************************************************************/
release {
    preCommitText = 'chore(version):'
    preTagCommitMessage = 'update to version'
    tagCommitMessage = 'tag version'
    newVersionCommitMessage = 'update snapshot version'
    tagTemplate = 'v${version}'
    buildTasks = ['classes']
    git {
        requireBranch.set('master')
    }

    // Dynamically set properties with default values
    failOnSnapshotDependencies = (project.hasProperty('release.failOnSnapshotDependencies')
            ? project.property('release.failOnSnapshotDependencies').toBoolean()
            : true)
    pushReleaseVersionBranch = (project.hasProperty('release.pushReleaseVersionBranch')
            ? project.property('release.pushReleaseVersionBranch').toString()
            : null)
}

/**********************************************************************************************************************\
 * Dev
 **********************************************************************************************************************/
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
